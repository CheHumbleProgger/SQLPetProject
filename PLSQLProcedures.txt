1.	Ïðîöåäóðà, ôîðìèðóþùàÿ íà îñíîâàíèè òàáëèöû "Ïðåïîäàâàòåëè" ïåðâûå 4 ïîëÿ òàáëèöû "Íàó÷íûå êàäðû" (Id, "ÔÈÎ", "Ó÷åíàÿ ñòåïåíü", "Êàôåäðà", "Ñïåöèàëüíîñòü", "Äàòà ïðèñâîåíèÿ ñòåïåíè", "Øèôð ó÷åíîãî ñîâåòà"). 
Îíà äîáàâëÿåò ïðåïîäàâàòåëåé, ïîëó÷èâøèõ íîâûå ó÷åíûå çâàíèÿ, è èçìåíÿåò ó÷åíîå çâàíèå ñîòðóäíèêà ñ êàíäèäàòà íàóê íà äîêòîðà íàóê, åñëè ñòåïåíè ïîëó÷åíû ïî îäíîé è òîé æå ñïåöèàëüíîñòè.

create table kadry(
N integer,
id varchar(6) not null,
fio varchar(200) not null,
degree varchar(50),
kafedra integer not null,
specialization varchar(50),
new_degree_date date,
vak_cipher varchar(6),
primary key(N),
foreign key(kafedra)
references Kafedry
);
create or replace procedure pushkadry is
cursor kad is select k.id id, k.fio f, k.degree deg, k.kafedra kaf from kadry k;
cursor lec is select l.cipher cip, l.fio fi, l.degree d, l.kafedra ka from lecturers l;
kadrow kad%rowtype;
lect lec%rowtype;  
i integer;
cnt integer;
begin
i:=1;
for lect in lec LOOP
 select count(*) into cnt from kadry k where k.id=lect.cip; 	
  if cnt = 0 then
   insert into kadry (N,id,fio,degree,kafedra) values(i,lect.cip,lect.fi,lect.d,lect.ka); 
   i:=i+1;
  else 
    update kadry k set k.degree='Doctor' where k.id=lect.cip and lect.d='Doctor' and k.degree='Candidate';
  end if;
end LOOP;
commit;
end;


2.	Ïðîöåäóðà, ïðèíèìàþùàÿ â êà÷åñòâå ïàðàìåòðà íàçâàíèå êàôåäðû è âûäàþùàÿ äëÿ âñåõ ïðåïîäàâàòåëåé ýòîé êàôåäðû ðàñïèñàíèå â ñëåäóþùåì âèäå:
ïðåïîäàâàòåëü1	äèñöèïëèíà1	òèï çàíÿòèÿ	ãðóïïà1    äåíü íåäåëè    âðåìÿ    àóä.
						ãðóïïà2
ïðåïîäàâàòåëü1	äèñöèïëèíà2	òèï çàíÿòèÿ	ãðóïïà1    äåíü íåäåëè    âðåìÿ    àóä.
						ãðóïïà2
						ãðóïïà3
ïðåïîäàâàòåëü2	äèñöèïëèíà1	òèï çàíÿòèÿ	ãðóïïà1    äåíü íåäåëè    âðåìÿ    àóä.
…
Âðåìÿ âûâåñòè èíòåðâàëîì ñ èñïîëüçîâàíèåì ôóíêöèè èç ëàáîðàòîðíîé ðàáîòû ¹1.

create or replace procedure leckaftime(kaftitle in varchar2) is
cursor timet(kaftitle in varchar2) is select l.fio f, d.title tit, t.class typ, t.groups gr, t.day d, t.time tim, t.auditorium aud 
from kafedry k, disciplines d, lecturers l, timetable t 
where l.kafedra=k.cipher and k.title=kaftitle and l.cipher=t.lecturer and d.cipher=t.discipline 
order by l.fio, d.title;
timerow timet%ROWTYPE;
end_time char(8);
begin
DBMS_OUTPUT.enable;
for timerow in timet(kaftitle) LOOP
 end_time:=class_end(timerow.tim,timerow.typ);
 dbms_output.put_line(timerow.f||' '|| timerow.tit ||' '|| timerow.typ ||' '|| timerow.gr ||' '|| timerow.d ||' '||timerow.tim||'--'||end_time||' '||timerow.aud);
end LOOP;
end; 
--Â ïîñëåäíåé ïðîîöåäóðå âñ¸ îòôîðìàòèðîâàíî ïî ñòîëáöàì
create or replace procedure leckaftime1(kaftitle in varchar2) is
cursor timet(kaftitle in varchar2) is select l.fio f, d.title tit, t.class typ, t.groups gr, t.day d, t.time tim, t.auditorium aud 
from kafedry k, disciplines d, lecturers l, timetable t 
where l.kafedra=k.cipher and k.title=kaftitle and l.cipher=t.lecturer and d.cipher=t.discipline 
order by l.fio, d.title;
timerow timet%ROWTYPE;
end_time char(8);
fio1 char(150);
titl1 char(75);
type1 char(20);
group1 char(15);
time1 char(5);
day1 char(4);
audit1 char(4);
begin
DBMS_OUTPUT.enable;
for timerow in timet(kaftitle) LOOP
 fio1:=timerow.f;
 titl1:=timerow.tit;
 type1:=timerow.typ;
 group1:=timerow.gr;
 time1:=timerow.tim;
 day1:=timerow.d;
 audit1:=timerow.aud;
 end_time:=class_end(timerow.tim,timerow.typ);
 dbms_output.put_line(fio1||' '||titl1||' '||type1||' '||group1||' '||day1||' '||time1||'--'||end_time||' '||audit1);
end LOOP;
end; 


3.	Ïðîöåäóðà, ïðîâåðÿþùàÿ êîððåêòíîñòü ðàñïèñàíèÿ äëÿ ïðåïîäàâàòåëåé. 
Ðàñïèñàíèå ñ÷èòàåòñÿ íåêîððåêòíûì, åñëè ó îäíîãî ïðåïîäàâàòåëÿ áîëåå 3-õ çàíÿòèé â äåíü,  
à òàêæå åñëè âðåìÿ ðàçíûõ çàíÿòèé ó îäíîãî ïðåïîäàâàòåëÿ ñîâïàäàåò èëè ïåðåñåêàåòñÿ. 


create or replace procedure timecorr is
cursor lecload is select count(*) as c, day d, lecturer l from timetable group by day, lecturer order by lecturer;
cursor lecint is select discipline di, day d, lecturer l, auditorium a, groups g, time t, class k from timetable;
cursor lecint1 is select discipline di, day d, lecturer l, auditorium a, groups g, time t, class k from timetable; 
lec lecload%ROWTYPE;
inter lecint%ROWTYPE;
inter1 lecint1%ROWTYPE;
sumload integer;
too_many_lec exception;
lec_more_3 exception;
begin
for lec in lecload LOOP
  sumload:=lec.c;
        if sumload>3 then
            raise lec_more_3;
        end if;
end LOOP;
for inter in lecint LOOP
 for inter1 in lecint1 LOOP
	if (inter.l=inter1.l) and (inter.d=inter1.d) and (inter1.t between inter.t and inter.t+1.29999999999) and ((inter.di<>inter1.di) or (inter.a<>inter1.a) or (inter.g<>inter1.g) or (inter.k<>inter1.k)) then
		raise too_many_lec;
	end if;
 end LOOP;
end LOOP;
exception
 when too_many_lec then
  raise_application_error(-20010,'Lectures intersection');
 when lec_more_3 then
  raise_application_error(-20011,'Too many lectures a day');
end;
